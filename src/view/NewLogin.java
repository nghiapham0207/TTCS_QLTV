/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DaoDatabase;
import dao.DaoLogin;
import static dao.DaoLogin.getList;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import model.UserMapping;

/**
 *
 * @author nghia
 */
public class NewLogin extends javax.swing.JFrame {

    /**
     * Creates new form NewLogin
     */
    private final CardLayout cl;
    private DefaultTableModel dtm;
    public static boolean hasError;

    public NewLogin() {
        initComponents();
        init();
        cl = (CardLayout) jPanel4.getLayout();
    }

    private String generateSQLAddLogin() {
        String loginName = jTextField1.getText().trim();
        String execStmt = "use [master] create login [" + loginName + "] ";
        String pwd = new String(jPasswordFieldPwd.getPassword());
        if (!pwd.isEmpty()) {
            execStmt = execStmt.concat(" with password = N'" + pwd + "' ");
        } else {
            execStmt = execStmt.concat(" with password = N'' ");
        }
        if (jCheckBoxMustChange.isSelected()) {
            execStmt = execStmt.concat(" must_change ");
        }
        String defDB = (String) jComboBoxDefDB.getSelectedItem();
        execStmt = execStmt.concat(", default_database = [" + defDB + "] ");
        if (jCheckBoxExpiration.isSelected()) {
            execStmt = execStmt.concat(", check_expiration = on");
        } else {
            execStmt = execStmt.concat(", check_expiration = off");
        }
        if (jCheckBoxPolicy.isSelected()) {
            execStmt = execStmt.concat(", check_policy = on");
        } else {
            execStmt = execStmt.concat(", check_policy = off");
        }
        return execStmt;
    }

    private boolean isUserNameEmpty() {
        boolean mapped;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            mapped = (boolean) jTable1.getValueAt(i, 0);
            if (mapped) {
                String userName = (String) jTable1.getValueAt(i, 2);
                if (userName.isEmpty()) {
                    return true;//empty
                }
            }
        }
        return false;
    }

    private void init() {
        rbSQL.setSelected(true);
        loadComboBoxDefDB(DaoDatabase.getList());
        loadTableMapping(DaoDatabase.getListDBtoMapping());
    }

    private void loadComboBoxDefDB(List<String> list) {
        jComboBoxDefDB.removeAllItems();
        for (String string : list) {
            jComboBoxDefDB.addItem(string);
        }
        jComboBoxDefDB.setSelectedItem("QLTV");
    }

    private int countMapped() {
        int count = 0;
        boolean mapped;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            mapped = (boolean) jTable1.getValueAt(i, 0);
            if (mapped) {
                count++;
            }
        }
        return count;
    }

    private void defaultUserName(String loginName) {
        boolean mapped;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            mapped = (boolean) jTable1.getValueAt(i, 0);
            if (mapped) {
                jTable1.setValueAt(loginName, i, 2);
            }
        }
    }

    private void loadTableMapping(List<UserMapping> list) {
        dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for (UserMapping userMapping : list) {
            if (userMapping.getDatabase().equalsIgnoreCase("QLTV")) {
                userMapping.setMap(true);
            }
            dtm.addRow(new Object[]{
                userMapping.isMap(),
                userMapping.getDatabase(),
                userMapping.getUser()
            });
        }
        jTable1.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButtonMapping = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        rbWindows = new javax.swing.JRadioButton();
        rbSQL = new javax.swing.JRadioButton();
        jLabelPwd = new javax.swing.JLabel();
        jPasswordFieldPwd = new javax.swing.JPasswordField();
        jLabelConfirm = new javax.swing.JLabel();
        jPasswordFieldConfirm = new javax.swing.JPasswordField();
        jCheckBoxPolicy = new javax.swing.JCheckBox();
        jCheckBoxExpiration = new javax.swing.JCheckBox();
        jCheckBoxMustChange = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxDefDB = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login - New");

        jPanel2.setPreferredSize(new java.awt.Dimension(556, 40));

        jButtonOK.setText("OK");
        jButtonOK.setPreferredSize(new java.awt.Dimension(65, 28));
        jButtonOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOKMouseClicked(evt);
            }
        });
        jPanel2.add(jButtonOK);

        jButton2.setText("Cancel");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jPanel2.add(jButton2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jButton3.setBackground(new java.awt.Color(153, 184, 247));
        jButton3.setText("General");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButtonMapping.setText("User Mapping");
        jButtonMapping.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonMappingMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonMapping, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonMapping)
                .addContainerGap(263, Short.MAX_VALUE))
        );

        jPanel4.setLayout(new java.awt.CardLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(600, 300));

        jLabel1.setText("Login name:");

        buttonGroup1.add(rbWindows);
        rbWindows.setText("Windows Authentication");
        rbWindows.setEnabled(false);

        buttonGroup1.add(rbSQL);
        rbSQL.setSelected(true);
        rbSQL.setText("SQL Server Authentication");
        rbSQL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbSQLItemStateChanged(evt);
            }
        });

        jLabelPwd.setText("Password:");

        jLabelConfirm.setText("Confirm Password:");

        jCheckBoxPolicy.setSelected(true);
        jCheckBoxPolicy.setText("Enforce password policy");
        jCheckBoxPolicy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPolicyItemStateChanged(evt);
            }
        });

        jCheckBoxExpiration.setSelected(true);
        jCheckBoxExpiration.setText("Enforce password expiration");
        jCheckBoxExpiration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxExpirationItemStateChanged(evt);
            }
        });

        jCheckBoxMustChange.setSelected(true);
        jCheckBoxMustChange.setText("User must change password at next login");

        jLabel4.setText("Default database");

        jComboBoxDefDB.setMaximumRowCount(15);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPwd)
                                    .addComponent(jLabelConfirm))
                                .addGap(145, 145, 145)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPasswordFieldPwd)
                                    .addComponent(jPasswordFieldConfirm)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxPolicy)
                                    .addComponent(jCheckBoxMustChange)
                                    .addComponent(jCheckBoxExpiration))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(177, 177, 177)
                        .addComponent(jComboBoxDefDB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbWindows)
                            .addComponent(rbSQL))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(203, 203, 203)
                        .addComponent(jTextField1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbWindows)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSQL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPwd)
                    .addComponent(jPasswordFieldPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelConfirm)
                    .addComponent(jPasswordFieldConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPolicy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxExpiration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxMustChange)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxDefDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel1, "card2");

        jLabel2.setText("User mapped to this login:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Map", "Database", "User"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.add(jPanel5, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbSQLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSQLItemStateChanged
        // TODO add your handling code here:
        System.out.println("rbSQL select");
        if (rbSQL.isSelected()) {
            jLabelPwd.setEnabled(true);
            jLabelConfirm.setEnabled(true);
            jPasswordFieldConfirm.setEnabled(true);
            jPasswordFieldPwd.setEnabled(true);
            jCheckBoxExpiration.setEnabled(true);
            jCheckBoxMustChange.setEnabled(true);
            jCheckBoxPolicy.setEnabled(true);
        } else {
            jLabelPwd.setEnabled(false);
            jLabelConfirm.setEnabled(false);
            jPasswordFieldConfirm.setEnabled(false);
            jPasswordFieldPwd.setEnabled(false);
            jCheckBoxExpiration.setEnabled(false);
            jCheckBoxMustChange.setEnabled(false);
            jCheckBoxPolicy.setEnabled(false);
        }
    }//GEN-LAST:event_rbSQLItemStateChanged

    private void jCheckBoxPolicyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPolicyItemStateChanged
        // TODO add your handling code here:
        System.out.println("chọn hoặc bỏ chọn");
        if (jCheckBoxPolicy.isSelected()) {
            jCheckBoxExpiration.setEnabled(true);
            jCheckBoxMustChange.setEnabled(true);

            jCheckBoxExpiration.setSelected(true);
            jCheckBoxMustChange.setSelected(true);
        } else {
            jCheckBoxExpiration.setEnabled(false);
            jCheckBoxMustChange.setEnabled(false);

            jCheckBoxExpiration.setSelected(false);
            jCheckBoxMustChange.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBoxPolicyItemStateChanged

    private void jCheckBoxExpirationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxExpirationItemStateChanged
        // TODO add your handling code here:
        if (jCheckBoxExpiration.isSelected()) {
            jCheckBoxMustChange.setEnabled(true);

            jCheckBoxMustChange.setSelected(true);
        } else {
            jCheckBoxMustChange.setEnabled(false);

            jCheckBoxMustChange.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBoxExpirationItemStateChanged

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            this.dispose();
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButtonOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOKMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            String pw = new String(jPasswordFieldPwd.getPassword());
            String confirm = new String(jPasswordFieldConfirm.getPassword());
            String loginName = jTextField1.getText().trim();
            if (loginName.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Login name is missing or empty!");
                return;
            }
            if (!pw.equals("") || !confirm.equals("")) {
                if (!pw.equals(confirm)) {
                    JOptionPane.showMessageDialog(rootPane, "Password and Confirm password do not match");
                    return;
                }
            }
//            boolean policy = jCheckBoxPolicy.isSelected();
//            boolean exp = jCheckBoxExpiration.isSelected();
//            boolean mustChange = jCheckBoxMustChange.isSelected();
//            String defDB = jComboBoxDefDB.getSelectedItem().toString();
//            DaoLogin.insert(name, pw, defDB, policy, exp, mustChange);

            if (isUserNameEmpty()) {
                System.out.println("username empty: " + isUserNameEmpty());
                defaultUserName(loginName);
            }
            String execStmt = generateSQLAddLogin();
            hasError = false;
            System.out.println(execStmt);
            DaoLogin.execNonQuery(execStmt);
            if (!hasError) {
                boolean mapped;
                hasError = false;
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    mapped = (boolean) jTable1.getValueAt(i, 0);
                    if (mapped) {
                        String dbName = (String) jTable1.getValueAt(i, 1);
                        String userName = (String) jTable1.getValueAt(i, 2);
                        DaoLogin.addUser(dbName, userName, loginName);
                    }
                }
                if (!hasError) {
                    ListLogin.loadListLogin(getList());
                    JOptionPane.showMessageDialog(null, "Success!");
                } else {
                    String dbName = (String) jComboBoxDefDB.getSelectedItem();
                    DaoLogin.delete(loginName, dbName, false);
                }
                //delete
            }
        }
    }//GEN-LAST:event_jButtonOKMouseClicked

    private void jButtonMappingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMappingMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            cl.show(jPanel4, "card3");
            jButtonMapping.setBackground(new java.awt.Color(153, 184, 247));
            jButton3.setBackground(new java.awt.Color(214, 217, 223));
        }
    }//GEN-LAST:event_jButtonMappingMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            cl.show(jPanel4, "card2");
            jButton3.setBackground(new java.awt.Color(153, 184, 247));
            jButtonMapping.setBackground(new java.awt.Color(214, 217, 223));
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            int row = jTable1.getSelectedRow();
            if (row != -1) {
                if (countMapped() == 0) {
                    boolean mapped;
                    mapped = true;
                    jTable1.setValueAt(mapped, row, 0);
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        // TODO add your handling code here:
        if (jTable1.isEditing()) {
            jTable1.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_jTable1FocusLost

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTable1KeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonMapping;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxExpiration;
    private javax.swing.JCheckBox jCheckBoxMustChange;
    private javax.swing.JCheckBox jCheckBoxPolicy;
    private javax.swing.JComboBox<String> jComboBoxDefDB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelConfirm;
    private javax.swing.JLabel jLabelPwd;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPasswordField jPasswordFieldConfirm;
    private javax.swing.JPasswordField jPasswordFieldPwd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton rbSQL;
    private javax.swing.JRadioButton rbWindows;
    // End of variables declaration//GEN-END:variables
}
